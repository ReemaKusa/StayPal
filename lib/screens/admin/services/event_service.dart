// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:staypal/models/event_model.dart';
//
// class EventService {
//   final eventRef = FirebaseFirestore.instance.collection('event');
//
//   Future<void> addEvent(Map<String, dynamic> eventData) async {
//     final snapshot = await eventRef.get();
//
//     // Generate next event ID like event01, event02, etc.
//     final existingIds = snapshot.docs
//         .map((doc) => int.tryParse(doc.id.replaceAll('event', '')))
//         .whereType<int>()
//         .toList();
//
//     final nextId = existingIds.isEmpty ? 1 : (existingIds.reduce((a, b) => a > b ? a : b) + 1);
//     final nextEventId = 'event${nextId.toString().padLeft(2, '0')}';
//
//     await eventRef.doc(nextEventId).set(eventData);
//   }
//
//   Future<void> updateEvent(String id, Map<String, dynamic> eventData) async {
//     await eventRef.doc(id).update(eventData);
//   }
//
//   Future<void> deleteEvent(String id) async {
//     await eventRef.doc(id).delete();
//   }
//
//   Future<List<EventModel>> fetchEvents() async {
//     final snapshot = await eventRef.get();
//     return snapshot.docs
//         .map((doc) => EventModel(eventId: doc.id, event: doc.data()))
//         .toList();
//   }
// }

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:staypal/models/event_model.dart';

class EventService {
  final eventRef = FirebaseFirestore.instance.collection('event');

  /// ðŸ”¸ Adds a new event with an autogenerated ID like event01, event02
  Future<void> addEvent(EventModel event) async {
    final snapshot = await eventRef.get();

    final existingIds = snapshot.docs
        .map((doc) => int.tryParse(doc.id.replaceAll('event', '')))
        .whereType<int>()
        .toList();

    final nextId = existingIds.isEmpty ? 1 : (existingIds.reduce((a, b) => a > b ? a : b) + 1);
    final nextEventId = 'event${nextId.toString().padLeft(2, '0')}';

    await eventRef.doc(nextEventId).set(event.toMap());
  }

  /// ðŸ”¸ Updates an existing event
  Future<void> updateEvent(String id, EventModel event) async {
    await eventRef.doc(id).update(event.toMap());
  }
  Future<String> getEventNameById(String eventId) async {
    final doc = await FirebaseFirestore.instance.collection('events').doc(eventId).get();
    return doc.exists ? (doc.data()?['name'] ?? 'Unnamed Event') : 'Unknown Event';
  }

  /// ðŸ”¸ Deletes an event
  Future<void> deleteEvent(String id) async {
    await eventRef.doc(id).delete();
  }

  /// ðŸ”¸ Fetches all events as a list of EventModel
  Future<List<EventModel>> fetchEvents() async {
    final snapshot = await eventRef.get();
    return snapshot.docs.map((doc) => EventModel.fromFirestore(doc)).toList();
  }

  /// ðŸ”¸ Optional: fetch single event by ID
  Future<EventModel?> getEventById(String id) async {
    final doc = await eventRef.doc(id).get();
    if (doc.exists) {
      return EventModel.fromFirestore(doc);
    }
    return null;
  }
}
